// src/lib/pdfService.js
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

/**
 * Generates a comprehensive PDF from calculator results
 * @param {Object} results - Full calculator results object
 * @param {Object} options - PDF generation options
 * @param {string} filename - Output filename
 * @returns {boolean} - Success status of PDF generation
 */
export function generateAndSavePDF(
  results,
  options = {},
  filename = 'voyager-configuration.pdf'
) {
  try {
    const doc = new jsPDF('p', 'mm', 'a4');
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    let currentY = 20;

    // Helper function to add section headers
    const addSectionHeader = (text) => {
      doc.setFontSize(16);
      doc.setTextColor(231, 144, 35); // Primary color
      doc.text(text, pageWidth / 2, currentY, { align: 'center' });
      currentY += 10;
    };

    // Helper function to add text rows
    const addTextRow = (label, value) => {
      doc.setFontSize(10);
      doc.setTextColor(50, 50, 50);
      doc.text(`${label}:`, 20, currentY);
      doc.text(String(value), 80, currentY);
      currentY += 7;
    };

    // Document Title
    doc.setFontSize(22);
    doc.setTextColor(231, 144, 35);
    doc.text(
      options.title || 'Voyager Configuration',
      pageWidth / 2,
      15,
      { align: 'center' }
    );

    // Subtitle
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(
      `Generated: ${new Date().toLocaleDateString()}`,
      pageWidth / 2,
      25,
      { align: 'center' }
    );

    // Configuration Summary
    if (results.summary) {
      addSectionHeader('Configuration Summary');
      Object.entries(results.summary).forEach(([key, value]) => {
        if (value && typeof value !== 'object') {
          addTextRow(
            key
              .replace(/_/g, ' ')
              .replace(/\b\w/g, (l) => l.toUpperCase()),
            value
          );
        }
      });
      currentY += 10;
    }

    // Features
    if (results.features && results.features.length) {
      addSectionHeader('Selected Features');
      results.features.forEach((feature) => {
        if (typeof feature === 'object') {
          Object.entries(feature).forEach(([key, value]) => {
            addTextRow(key, value);
          });
        } else {
          addTextRow('Feature', feature);
        }
      });
      currentY += 10;
    }

    // Pricing Details
    if (results.pricing) {
      addSectionHeader('Pricing Breakdown');

      // Base Price
      if (results.pricing.basePrice) {
        addTextRow(
          'Base Price',
          `£${results.pricing.basePrice.toFixed(2)}`
        );
      }

      // Additional Costs
      if (results.pricing.additionalCosts) {
        Object.entries(results.pricing.additionalCosts).forEach(
          ([key, value]) => {
            addTextRow(key, `£${value.toFixed(2)}`);
          }
        );
      }

      // Total Price
      if (results.pricing.totalPrice) {
        doc.setFontSize(12);
        doc.setTextColor(231, 144, 35);
        addTextRow(
          'Total Price',
          `£${results.pricing.totalPrice.toFixed(2)}`
        );
      }
      currentY += 10;
    }

    // Commission Items
    if (results.commissionItems && results.commissionItems.length) {
      addSectionHeader('Commissioned Items');
      results.commissionItems.forEach((item) => {
        addTextRow('Item', item);
      });
      currentY += 10;
    }

    // Recommendations
    if (results.recommendations && results.recommendations.length) {
      addSectionHeader('Recommended Solutions');
      results.recommendations.forEach((rec) => {
        addTextRow('Solution', rec.title);
        addTextRow('Description', rec.description);

        if (rec.features) {
          rec.features.forEach((feature, index) => {
            addTextRow(`Feature ${index + 1}`, feature);
          });
        }
        currentY += 5;
      });
    }

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text(
      'Generated by Voyager Immersive',
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );

    // Save the document
    doc.save(filename);
    return true;
  } catch (error) {
    console.error('PDF Generation Error:', error);
    return false;
  }
}

/**
 * Generates a PDF buffer for server-side or preview use
 * @param {Object} results - Full calculator results object
 * @param {Object} options - PDF generation options
 * @returns {ArrayBuffer|null} PDF buffer or null if generation fails
 */
export function generatePDFBuffer(results, options = {}) {
  try {
    const doc = new jsPDF();

    // Call existing generation method with buffer output
    generateAndSavePDF(results, options);

    return doc.output('arraybuffer');
  } catch (error) {
    console.error('PDF Buffer Generation Error:', error);
    return null;
  }
}
